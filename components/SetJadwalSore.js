import React, { Component } from "react";
import { StyleSheet, View, TouchableOpacity, Text, AsyncStorage, Alert } from "react-native";
import TimePicker from "react-native-24h-timepicker";
import BackgroundJob from "react-native-background-job";
import Resource from './network/Resource'
import DateTimePicker from 'react-native-modal-datetime-picker';
import moment from 'moment';
import PushNotification from 'react-native-push-notification';
import I18n from '../i18n/i18n';

class SetJadwalSore extends Component {
  state = {
    enableNotification: true,
    isDateTimePickerVisible: false,
    notificationTime: moment({ hour: 17 }),    
    tambakId : '',
    namaTambak : ''
  };

  static navigationOptions = ({navigation}) => ({
    title: I18n.t('hompage.aturjadwal'),            
  })

  componentDidMount = async() => {        
    const {params} = this.props.navigation.state;
    const tambakId = params ? params.tambakId : null;
    const namaTambak = params ? params.namaTambak : null;
    const date = await AsyncStorage.getItem(`sore${tambakId}`);
    const setTime = JSON.parse(date)
    this.setState({
      tambakId: tambakId,
      namaTambak: namaTambak,
      notificationTime: setTime
    })
  }        

  enableNotification = value => {
    this.setState({
      enableNotification: value,
    });
  };

  showDateTimePicker = () => {
    this.setState({ isDateTimePickerVisible: true });    
  };

  hideDateTimePicker = () => {
    this.setState({ isDateTimePickerVisible: false });
  };

  submitReg = async (id, date) => {            
    var date = moment(date).format('HH:mm')    
    let formdata = new FormData();
    formdata.append('type', 'pakan_sore');
    formdata.append('value', date);
    
    try{
        await AsyncStorage.getItem('user', (error, result) => {
            let tokenString = JSON.parse(result);                                       
            Resource.edit_jadwal(formdata, tokenString, id)            
            .then((res) => {                                                                                   
                console.log(res)                
            })
            .catch((err) => {            
                console.warn('Error:', err);
            })  
        });   
    } catch (error) {            
        console.log('AsyncStorage error: ' + error.message);
    }            
  }

  handleDatePicked = date => {        
    
    var tambakId = this.state.tambakId
    var dateNow = moment().format("MM DD YY");
    var timeNow = moment().format('HH mm');
    var dateSelect = moment(date).format("MM DD YY")
    var timeSelect = moment(date).format("HH mm")
    var dateTommorow = moment(date);        
    
    if (dateSelect == dateNow && timeSelect <= timeNow) {
      var tomorrow = dateTommorow.add(1, 'day');    
      date = new Date(tomorrow)
      console.log('plus 1')
    }else if(dateSelect > dateNow && timeSelect <= timeNow){
      var yesterday = dateTommorow.subtract(1, 'day');
      var tomorrow = dateTommorow.add(1, 'day');    
      date = new Date(yesterday)
      console.log('tetap')
    }else if(dateSelect > dateNow && timeSelect > timeNow){
      var yesterday = dateTommorow.subtract(1, 'day');      
      date = new Date(yesterday)
      console.log('pas')
    }
    this.hideDateTimePicker();   
    this.submitReg(tambakId, date)             
    this.setState({
      notificationTime: date,
    });
    AsyncStorage.setItem(`sore${tambakId}`, JSON.stringify(this.state.notificationTime));
    this.scheduleNotif()
    Alert.alert(
      '',
      `Berhasil Mengatur Waktu Pemberian Pakan pukul ${moment(date).format("HH:mm")} WIB`
    )    
  };

  scheduleNotif = async(soundName) =>{            
    PushNotification.localNotificationSchedule({
      date: this.state.notificationTime,

      /* Android Only Properties */
      id: `2${this.state.tambakId}`, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      type: 'sore',
      tambakId: this.state.tambakId,
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: 'Silahkan anda berikan pakan disore hari sekarang dengan pelet', // (optional) default: "message" prop
      // subText: 'This is a subText', // (optional) default: none
      color: 'blue', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: true, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: '', // (optional) default: empty string
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

      /* iOS and Android properties */
      title: this.state.namaTambak, // (optional)
      message: 'Beri Pakan Sore Hari', // (required)      
      playSound: !!soundName, // (optional) default: true
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      repeatType: "day",
      soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      // actions: '["Simpan Notifikasi"]', // (Android only) See the doc for notification actions to know more
    });
  }
 
  render() {
    const { isDateTimePickerVisible, notificationTime } = this.state;
    return (
      <View style={styles.container}>        
        <Text style={styles.text}>Jadwal Pakan Sore</Text>
        <Text style={styles.text}>Pukul {moment(notificationTime).format('HH:mm')} WIB</Text>
        <TouchableOpacity
          onPress = {this.showDateTimePicker}
          style={styles.buttonpagi}
        >
        <Text style={styles.buttonText}>Atur Jadwal</Text>
        </TouchableOpacity>    

        <DateTimePicker
          isVisible={isDateTimePickerVisible}
          onConfirm={this.handleDatePicked}
          onCancel={this.hideDateTimePicker}
          mode="time"
          is24Hour={true}
          date={new Date(notificationTime)}
          titleIOS="Pick your Notification time"
        />               
      </View>
    );
  }
}
 
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 5,    
    backgroundColor: "#254F6E",  
  },
  text: {
    fontSize: 20,
    marginTop: 10,
    color: 'white'
  },
  buttonpagi: {
    backgroundColor: "#00A9DE",
    paddingVertical: 11,
    paddingHorizontal: 17,
    borderRadius: 3,
    marginVertical: 50,
    alignItems: "center",
  },
  
  buttonText: {
    color: "#FFFFFF",
    fontSize: 16,
    fontWeight: "600"
  }
});
 
export default SetJadwalSore;